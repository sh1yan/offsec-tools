// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package localmachine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		case "FullName":
			out.FullName = string(in.String())
		case "IsEnabled":
			out.IsEnabled = bool(in.Bool())
		case "IsLocked":
			out.IsLocked = bool(in.Bool())
		case "IsAdmin":
			out.IsAdmin = bool(in.Bool())
		case "PasswordNeverExpires":
			out.PasswordNeverExpires = bool(in.Bool())
		case "NoChangePassword":
			out.NoChangePassword = bool(in.Bool())
		case "PasswordLastSet":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PasswordLastSet).UnmarshalJSON(data))
			}
		case "LastLogon":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastLogon).UnmarshalJSON(data))
			}
		case "LastLogoff":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastLogoff).UnmarshalJSON(data))
			}
		case "BadPasswordCount":
			out.BadPasswordCount = int(in.Int())
		case "NumberOfLogins":
			out.NumberOfLogins = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.SID != "" {
		const prefix string = ",\"SID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SID))
	}
	if in.FullName != "" {
		const prefix string = ",\"FullName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FullName))
	}
	if in.IsEnabled {
		const prefix string = ",\"IsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsEnabled))
	}
	if in.IsLocked {
		const prefix string = ",\"IsLocked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsLocked))
	}
	if in.IsAdmin {
		const prefix string = ",\"IsAdmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsAdmin))
	}
	if in.PasswordNeverExpires {
		const prefix string = ",\"PasswordNeverExpires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PasswordNeverExpires))
	}
	if in.NoChangePassword {
		const prefix string = ",\"NoChangePassword\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NoChangePassword))
	}
	if true {
		const prefix string = ",\"PasswordLastSet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PasswordLastSet).MarshalJSON())
	}
	if true {
		const prefix string = ",\"LastLogon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastLogon).MarshalJSON())
	}
	if true {
		const prefix string = ",\"LastLogoff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastLogoff).MarshalJSON())
	}
	if in.BadPasswordCount != 0 {
		const prefix string = ",\"BadPasswordCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BadPasswordCount))
	}
	if in.NumberOfLogins != 0 {
		const prefix string = ",\"NumberOfLogins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfLogins))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine1(in *jlexer.Lexer, out *TaskSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AllowDemandStart":
			out.AllowDemandStart = bool(in.Bool())
		case "AllowHardTerminate":
			out.AllowHardTerminate = bool(in.Bool())
		case "DeleteExpiredTaskAfter":
			out.DeleteExpiredTaskAfter = string(in.String())
		case "DontStartOnBatteries":
			out.DontStartOnBatteries = bool(in.Bool())
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "TimeLimit":
			out.TimeLimit = string(in.String())
		case "Hidden":
			out.Hidden = bool(in.Bool())
		case "Priority":
			out.Priority = uint(in.Uint())
		case "RestartCount":
			out.RestartCount = uint(in.Uint())
		case "RestartInterval":
			out.RestartInterval = string(in.String())
		case "RunOnlyIfIdle":
			out.RunOnlyIfIdle = bool(in.Bool())
		case "RunOnlyIfNetworkAvailable":
			out.RunOnlyIfNetworkAvailable = bool(in.Bool())
		case "StartWhenAvailable":
			out.StartWhenAvailable = bool(in.Bool())
		case "StopIfGoingOnBatteries":
			out.StopIfGoingOnBatteries = bool(in.Bool())
		case "WakeToRun":
			out.WakeToRun = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine1(out *jwriter.Writer, in TaskSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllowDemandStart {
		const prefix string = ",\"AllowDemandStart\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.AllowDemandStart))
	}
	if in.AllowHardTerminate {
		const prefix string = ",\"AllowHardTerminate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowHardTerminate))
	}
	if in.DeleteExpiredTaskAfter != "" {
		const prefix string = ",\"DeleteExpiredTaskAfter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeleteExpiredTaskAfter))
	}
	if in.DontStartOnBatteries {
		const prefix string = ",\"DontStartOnBatteries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DontStartOnBatteries))
	}
	if in.Enabled {
		const prefix string = ",\"Enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	if in.TimeLimit != "" {
		const prefix string = ",\"TimeLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TimeLimit))
	}
	if in.Hidden {
		const prefix string = ",\"Hidden\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hidden))
	}
	if in.Priority != 0 {
		const prefix string = ",\"Priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Priority))
	}
	if in.RestartCount != 0 {
		const prefix string = ",\"RestartCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.RestartCount))
	}
	if in.RestartInterval != "" {
		const prefix string = ",\"RestartInterval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RestartInterval))
	}
	if in.RunOnlyIfIdle {
		const prefix string = ",\"RunOnlyIfIdle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RunOnlyIfIdle))
	}
	if in.RunOnlyIfNetworkAvailable {
		const prefix string = ",\"RunOnlyIfNetworkAvailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RunOnlyIfNetworkAvailable))
	}
	if in.StartWhenAvailable {
		const prefix string = ",\"StartWhenAvailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.StartWhenAvailable))
	}
	if in.StopIfGoingOnBatteries {
		const prefix string = ",\"StopIfGoingOnBatteries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.StopIfGoingOnBatteries))
	}
	if in.WakeToRun {
		const prefix string = ",\"WakeToRun\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WakeToRun))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine1(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine2(in *jlexer.Lexer, out *TaskDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]TaskAction, 0, 0)
					} else {
						out.Actions = []TaskAction{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TaskAction
					(v1).UnmarshalEasyJSON(in)
					out.Actions = append(out.Actions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Context":
			out.Context = string(in.String())
		case "Data":
			out.Data = string(in.String())
		case "Principal":
			(out.Principal).UnmarshalEasyJSON(in)
		case "RegistrationInfo":
			(out.RegistrationInfo).UnmarshalEasyJSON(in)
		case "Settings":
			(out.Settings).UnmarshalEasyJSON(in)
		case "Triggers":
			if in.IsNull() {
				in.Skip()
				out.Triggers = nil
			} else {
				in.Delim('[')
				if out.Triggers == nil {
					if !in.IsDelim(']') {
						out.Triggers = make([]string, 0, 4)
					} else {
						out.Triggers = []string{}
					}
				} else {
					out.Triggers = (out.Triggers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Triggers = append(out.Triggers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "XMLText":
			out.XMLText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine2(out *jwriter.Writer, in TaskDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Actions) != 0 {
		const prefix string = ",\"Actions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.Actions {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Context != "" {
		const prefix string = ",\"Context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Context))
	}
	if in.Data != "" {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	if true {
		const prefix string = ",\"Principal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Principal).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"RegistrationInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.RegistrationInfo).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Settings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Settings).MarshalEasyJSON(out)
	}
	if len(in.Triggers) != 0 {
		const prefix string = ",\"Triggers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Triggers {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.XMLText != "" {
		const prefix string = ",\"XMLText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.XMLText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine2(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine3(in *jlexer.Lexer, out *TaskAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "PathDACL":
			if in.IsNull() {
				in.Skip()
				out.PathDACL = nil
			} else {
				out.PathDACL = in.Bytes()
			}
		case "PathOwner":
			out.PathOwner = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Args":
			out.Args = string(in.String())
		case "WorkingDir":
			out.WorkingDir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine3(out *jwriter.Writer, in TaskAction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if len(in.PathDACL) != 0 {
		const prefix string = ",\"PathDACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.PathDACL)
	}
	if in.PathOwner != "" {
		const prefix string = ",\"PathOwner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathOwner))
	}
	if in.Path != "" {
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Args != "" {
		const prefix string = ",\"Args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Args))
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"WorkingDir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkingDir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine3(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine4(in *jlexer.Lexer, out *Software) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayName":
			out.DisplayName = string(in.String())
		case "displayVersion":
			out.DisplayVersion = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "publisher":
			out.Publisher = string(in.String())
		case "installDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InstallDate).UnmarshalJSON(data))
			}
		case "estimatedSize":
			out.EstimatedSize = uint64(in.Uint64())
		case "Contact":
			out.Contact = string(in.String())
		case "HelpLink":
			out.HelpLink = string(in.String())
		case "InstallSource":
			out.InstallSource = string(in.String())
		case "InstallLocation":
			out.InstallLocation = string(in.String())
		case "UninstallString":
			out.UninstallString = string(in.String())
		case "VersionMajor":
			out.VersionMajor = uint64(in.Uint64())
		case "VersionMinor":
			out.VersionMinor = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine4(out *jwriter.Writer, in Software) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"displayVersion\":"
		out.RawString(prefix)
		out.String(string(in.DisplayVersion))
	}
	{
		const prefix string = ",\"arch\":"
		out.RawString(prefix)
		out.String(string(in.Arch))
	}
	{
		const prefix string = ",\"publisher\":"
		out.RawString(prefix)
		out.String(string(in.Publisher))
	}
	{
		const prefix string = ",\"installDate\":"
		out.RawString(prefix)
		out.Raw((in.InstallDate).MarshalJSON())
	}
	{
		const prefix string = ",\"estimatedSize\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EstimatedSize))
	}
	{
		const prefix string = ",\"Contact\":"
		out.RawString(prefix)
		out.String(string(in.Contact))
	}
	{
		const prefix string = ",\"HelpLink\":"
		out.RawString(prefix)
		out.String(string(in.HelpLink))
	}
	{
		const prefix string = ",\"InstallSource\":"
		out.RawString(prefix)
		out.String(string(in.InstallSource))
	}
	{
		const prefix string = ",\"InstallLocation\":"
		out.RawString(prefix)
		out.String(string(in.InstallLocation))
	}
	{
		const prefix string = ",\"UninstallString\":"
		out.RawString(prefix)
		out.String(string(in.UninstallString))
	}
	{
		const prefix string = ",\"VersionMajor\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.VersionMajor))
	}
	{
		const prefix string = ",\"VersionMinor\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.VersionMinor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Software) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Software) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Software) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Software) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine4(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine5(in *jlexer.Lexer, out *Share) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Remark":
			out.Remark = string(in.String())
		case "Permissions":
			out.Permissions = int(in.Int())
		case "Type":
			out.Type = int(in.Int())
		case "DACL":
			if in.IsNull() {
				in.Skip()
				out.DACL = nil
			} else {
				out.DACL = in.Bytes()
			}
		case "PathDACL":
			if in.IsNull() {
				in.Skip()
				out.PathDACL = nil
			} else {
				out.PathDACL = in.Bytes()
			}
		case "PathOwner":
			out.PathOwner = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine5(out *jwriter.Writer, in Share) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Remark != "" {
		const prefix string = ",\"Remark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Remark))
	}
	if in.Permissions != 0 {
		const prefix string = ",\"Permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permissions))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if len(in.DACL) != 0 {
		const prefix string = ",\"DACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.DACL)
	}
	if len(in.PathDACL) != 0 {
		const prefix string = ",\"PathDACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.PathDACL)
	}
	if in.PathOwner != "" {
		const prefix string = ",\"PathOwner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathOwner))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Share) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Share) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Share) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Share) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine5(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine6(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RegistryOwner":
			out.RegistryOwner = string(in.String())
		case "RegistryDACL":
			if in.IsNull() {
				in.Skip()
				out.RegistryDACL = nil
			} else {
				out.RegistryDACL = in.Bytes()
			}
		case "Name":
			out.Name = string(in.String())
		case "DisplayName":
			out.DisplayName = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "ImagePath":
			out.ImagePath = string(in.String())
		case "ImageExecutable":
			out.ImageExecutable = string(in.String())
		case "ImageExecutableOwner":
			out.ImageExecutableOwner = string(in.String())
		case "ImageExecutableDACL":
			if in.IsNull() {
				in.Skip()
				out.ImageExecutableDACL = nil
			} else {
				out.ImageExecutableDACL = in.Bytes()
			}
		case "Start":
			out.Start = int(in.Int())
		case "Type":
			out.Type = int(in.Int())
		case "Account":
			out.Account = string(in.String())
		case "AccountSID":
			out.AccountSID = string(in.String())
		case "RequiredPrivileges":
			if in.IsNull() {
				in.Skip()
				out.RequiredPrivileges = nil
			} else {
				in.Delim('[')
				if out.RequiredPrivileges == nil {
					if !in.IsDelim(']') {
						out.RequiredPrivileges = make([]string, 0, 4)
					} else {
						out.RequiredPrivileges = []string{}
					}
				} else {
					out.RequiredPrivileges = (out.RequiredPrivileges)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.RequiredPrivileges = append(out.RequiredPrivileges, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine6(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RegistryOwner != "" {
		const prefix string = ",\"RegistryOwner\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RegistryOwner))
	}
	if len(in.RegistryDACL) != 0 {
		const prefix string = ",\"RegistryDACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.RegistryDACL)
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"DisplayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ImagePath != "" {
		const prefix string = ",\"ImagePath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImagePath))
	}
	if in.ImageExecutable != "" {
		const prefix string = ",\"ImageExecutable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageExecutable))
	}
	if in.ImageExecutableOwner != "" {
		const prefix string = ",\"ImageExecutableOwner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageExecutableOwner))
	}
	if len(in.ImageExecutableDACL) != 0 {
		const prefix string = ",\"ImageExecutableDACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.ImageExecutableDACL)
	}
	if in.Start != 0 {
		const prefix string = ",\"Start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Start))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Account != "" {
		const prefix string = ",\"Account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	if in.AccountSID != "" {
		const prefix string = ",\"AccountSID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountSID))
	}
	if len(in.RequiredPrivileges) != 0 {
		const prefix string = ",\"RequiredPrivileges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.RequiredPrivileges {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine6(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine7(in *jlexer.Lexer, out *RegistrationInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Author":
			out.Author = string(in.String())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "Description":
			out.Description = string(in.String())
		case "Documentation":
			out.Documentation = string(in.String())
		case "SecurityDescriptor":
			out.SecurityDescriptor = string(in.String())
		case "Source":
			out.Source = string(in.String())
		case "URI":
			out.URI = string(in.String())
		case "Version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine7(out *jwriter.Writer, in RegistrationInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Author != "" {
		const prefix string = ",\"Author\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Author))
	}
	if true {
		const prefix string = ",\"Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Date).MarshalJSON())
	}
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Documentation != "" {
		const prefix string = ",\"Documentation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Documentation))
	}
	if in.SecurityDescriptor != "" {
		const prefix string = ",\"SecurityDescriptor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityDescriptor))
	}
	if in.Source != "" {
		const prefix string = ",\"Source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.URI != "" {
		const prefix string = ",\"URI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	if in.Version != "" {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine7(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine8(in *jlexer.Lexer, out *RegisteredTask) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Definition":
			(out.Definition).UnmarshalEasyJSON(in)
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "State":
			out.State = string(in.String())
		case "MissedRuns":
			out.MissedRuns = uint(in.Uint())
		case "NextRunTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NextRunTime).UnmarshalJSON(data))
			}
		case "LastRunTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRunTime).UnmarshalJSON(data))
			}
		case "LastTaskResult":
			out.LastTaskResult = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine8(out *jwriter.Writer, in RegisteredTask) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if true {
		const prefix string = ",\"Definition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Definition).MarshalEasyJSON(out)
	}
	if in.Enabled {
		const prefix string = ",\"Enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	if in.State != "" {
		const prefix string = ",\"State\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.MissedRuns != 0 {
		const prefix string = ",\"MissedRuns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.MissedRuns))
	}
	if true {
		const prefix string = ",\"NextRunTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.NextRunTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"LastRunTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastRunTime).MarshalJSON())
	}
	if in.LastTaskResult != 0 {
		const prefix string = ",\"LastTaskResult\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LastTaskResult))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisteredTask) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisteredTask) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisteredTask) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisteredTask) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine8(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine9(in *jlexer.Lexer, out *Privilege) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "AssignedSIDs":
			if in.IsNull() {
				in.Skip()
				out.AssignedSIDs = nil
			} else {
				in.Delim('[')
				if out.AssignedSIDs == nil {
					if !in.IsDelim(']') {
						out.AssignedSIDs = make([]string, 0, 4)
					} else {
						out.AssignedSIDs = []string{}
					}
				} else {
					out.AssignedSIDs = (out.AssignedSIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.AssignedSIDs = append(out.AssignedSIDs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine9(out *jwriter.Writer, in Privilege) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.AssignedSIDs) != 0 {
		const prefix string = ",\"AssignedSIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.AssignedSIDs {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Privilege) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Privilege) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Privilege) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Privilege) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine9(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine10(in *jlexer.Lexer, out *Principal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "GroupID":
			out.GroupID = string(in.String())
		case "ID":
			out.ID = string(in.String())
		case "LogonType":
			out.LogonType = int(in.Int())
		case "RunLevel":
			out.RunLevel = int(in.Int())
		case "UserID":
			out.UserID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine10(out *jwriter.Writer, in Principal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.GroupID != "" {
		const prefix string = ",\"GroupID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GroupID))
	}
	if in.ID != "" {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.LogonType != 0 {
		const prefix string = ",\"LogonType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LogonType))
	}
	if in.RunLevel != 0 {
		const prefix string = ",\"RunLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RunLevel))
	}
	if in.UserID != "" {
		const prefix string = ",\"UserID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Principal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Principal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Principal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Principal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine10(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine11(in *jlexer.Lexer, out *NetworkInterfaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "MACAddress":
			out.MACAddress = string(in.String())
		case "Flags":
			out.Flags = uint(in.Uint())
		case "Addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Addresses = append(out.Addresses, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine11(out *jwriter.Writer, in NetworkInterfaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.MACAddress != "" {
		const prefix string = ",\"MACAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MACAddress))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Flags))
	}
	if len(in.Addresses) != 0 {
		const prefix string = ",\"Addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Addresses {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkInterfaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkInterfaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkInterfaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkInterfaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine11(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine12(in *jlexer.Lexer, out *NetworkInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "InternetConnectivity":
			out.InternetConnectivity = string(in.String())
		case "NetworkInterfaces":
			if in.IsNull() {
				in.Skip()
				out.NetworkInterfaces = nil
			} else {
				in.Delim('[')
				if out.NetworkInterfaces == nil {
					if !in.IsDelim(']') {
						out.NetworkInterfaces = make([]NetworkInterfaceInfo, 0, 1)
					} else {
						out.NetworkInterfaces = []NetworkInterfaceInfo{}
					}
				} else {
					out.NetworkInterfaces = (out.NetworkInterfaces)[:0]
				}
				for !in.IsDelim(']') {
					var v31 NetworkInterfaceInfo
					(v31).UnmarshalEasyJSON(in)
					out.NetworkInterfaces = append(out.NetworkInterfaces, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine12(out *jwriter.Writer, in NetworkInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InternetConnectivity != "" {
		const prefix string = ",\"InternetConnectivity\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.InternetConnectivity))
	}
	if len(in.NetworkInterfaces) != 0 {
		const prefix string = ",\"NetworkInterfaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.NetworkInterfaces {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine12(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine13(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine13(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.SID != "" {
		const prefix string = ",\"SID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Member) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Member) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Member) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Member) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine13(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine14(in *jlexer.Lexer, out *Machine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "LocalSID":
			out.LocalSID = string(in.String())
		case "Domain":
			out.Domain = string(in.String())
		case "ComputerDomainSID":
			out.ComputerDomainSID = string(in.String())
		case "IsDomainJoined":
			out.IsDomainJoined = bool(in.Bool())
		case "Architecture":
			out.Architecture = string(in.String())
		case "NumberOfProcessors":
			out.NumberOfProcessors = int(in.Int())
		case "ProductName":
			out.ProductName = string(in.String())
		case "ProductType":
			out.ProductType = string(in.String())
		case "ProductSuite":
			out.ProductSuite = string(in.String())
		case "EditionID":
			out.EditionID = string(in.String())
		case "ReleaseID":
			out.ReleaseID = string(in.String())
		case "BuildBranch":
			out.BuildBranch = string(in.String())
		case "MajorVersionNumber":
			out.MajorVersionNumber = uint64(in.Uint64())
		case "Version":
			out.Version = string(in.String())
		case "BuildNumber":
			out.BuildNumber = string(in.String())
		case "DefaultUsername":
			out.DefaultUsername = string(in.String())
		case "DefaultDomain":
			out.DefaultDomain = string(in.String())
		case "AltDefaultUsername":
			out.AltDefaultUsername = string(in.String())
		case "AltDefaultDomain":
			out.AltDefaultDomain = string(in.String())
		case "AppCache":
			if in.IsNull() {
				in.Skip()
				out.AppCache = nil
			} else {
				in.Delim('[')
				if out.AppCache == nil {
					if !in.IsDelim(']') {
						out.AppCache = make([][]uint8, 0, 2)
					} else {
						out.AppCache = [][]uint8{}
					}
				} else {
					out.AppCache = (out.AppCache)[:0]
				}
				for !in.IsDelim(']') {
					var v34 []uint8
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						v34 = in.Bytes()
					}
					out.AppCache = append(out.AppCache, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SCCMLastValidMP":
			out.SCCMLastValidMP = string(in.String())
		case "WUServer":
			out.WUServer = string(in.String())
		case "WUStatusServer":
			out.WUStatusServer = string(in.String())
		case "UACConsentPromptBehaviorAdmin":
			out.UACConsentPromptBehaviorAdmin = uint64(in.Uint64())
		case "UACEnableLUA":
			out.UACEnableLUA = uint64(in.Uint64())
		case "UACLocalAccountTokenFilterPolicy":
			out.UACLocalAccountTokenFilterPolicy = uint64(in.Uint64())
		case "UACFilterAdministratorToken":
			out.UACFilterAdministratorToken = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine14(out *jwriter.Writer, in Machine) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.LocalSID != "" {
		const prefix string = ",\"LocalSID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalSID))
	}
	if in.Domain != "" {
		const prefix string = ",\"Domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.ComputerDomainSID != "" {
		const prefix string = ",\"ComputerDomainSID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ComputerDomainSID))
	}
	if in.IsDomainJoined {
		const prefix string = ",\"IsDomainJoined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDomainJoined))
	}
	if in.Architecture != "" {
		const prefix string = ",\"Architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Architecture))
	}
	if in.NumberOfProcessors != 0 {
		const prefix string = ",\"NumberOfProcessors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfProcessors))
	}
	if in.ProductName != "" {
		const prefix string = ",\"ProductName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProductName))
	}
	if in.ProductType != "" {
		const prefix string = ",\"ProductType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProductType))
	}
	if in.ProductSuite != "" {
		const prefix string = ",\"ProductSuite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProductSuite))
	}
	if in.EditionID != "" {
		const prefix string = ",\"EditionID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EditionID))
	}
	if in.ReleaseID != "" {
		const prefix string = ",\"ReleaseID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReleaseID))
	}
	if in.BuildBranch != "" {
		const prefix string = ",\"BuildBranch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildBranch))
	}
	if in.MajorVersionNumber != 0 {
		const prefix string = ",\"MajorVersionNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.MajorVersionNumber))
	}
	if in.Version != "" {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.BuildNumber != "" {
		const prefix string = ",\"BuildNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildNumber))
	}
	if in.DefaultUsername != "" {
		const prefix string = ",\"DefaultUsername\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultUsername))
	}
	if in.DefaultDomain != "" {
		const prefix string = ",\"DefaultDomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultDomain))
	}
	if in.AltDefaultUsername != "" {
		const prefix string = ",\"AltDefaultUsername\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AltDefaultUsername))
	}
	if in.AltDefaultDomain != "" {
		const prefix string = ",\"AltDefaultDomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AltDefaultDomain))
	}
	if len(in.AppCache) != 0 {
		const prefix string = ",\"AppCache\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.AppCache {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v37)
			}
			out.RawByte(']')
		}
	}
	if in.SCCMLastValidMP != "" {
		const prefix string = ",\"SCCMLastValidMP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SCCMLastValidMP))
	}
	if in.WUServer != "" {
		const prefix string = ",\"WUServer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WUServer))
	}
	if in.WUStatusServer != "" {
		const prefix string = ",\"WUStatusServer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WUStatusServer))
	}
	if in.UACConsentPromptBehaviorAdmin != 0 {
		const prefix string = ",\"UACConsentPromptBehaviorAdmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACConsentPromptBehaviorAdmin))
	}
	if in.UACEnableLUA != 0 {
		const prefix string = ",\"UACEnableLUA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACEnableLUA))
	}
	if in.UACLocalAccountTokenFilterPolicy != 0 {
		const prefix string = ",\"UACLocalAccountTokenFilterPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACLocalAccountTokenFilterPolicy))
	}
	if in.UACFilterAdministratorToken != 0 {
		const prefix string = ",\"UACFilterAdministratorToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACFilterAdministratorToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Machine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Machine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Machine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Machine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine14(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine15(in *jlexer.Lexer, out *LoginPopularity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Day":
			if in.IsNull() {
				in.Skip()
				out.Day = nil
			} else {
				in.Delim('[')
				if out.Day == nil {
					if !in.IsDelim(']') {
						out.Day = make([]LoginCount, 0, 1)
					} else {
						out.Day = []LoginCount{}
					}
				} else {
					out.Day = (out.Day)[:0]
				}
				for !in.IsDelim(']') {
					var v40 LoginCount
					(v40).UnmarshalEasyJSON(in)
					out.Day = append(out.Day, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Week":
			if in.IsNull() {
				in.Skip()
				out.Week = nil
			} else {
				in.Delim('[')
				if out.Week == nil {
					if !in.IsDelim(']') {
						out.Week = make([]LoginCount, 0, 1)
					} else {
						out.Week = []LoginCount{}
					}
				} else {
					out.Week = (out.Week)[:0]
				}
				for !in.IsDelim(']') {
					var v41 LoginCount
					(v41).UnmarshalEasyJSON(in)
					out.Week = append(out.Week, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Month":
			if in.IsNull() {
				in.Skip()
				out.Month = nil
			} else {
				in.Delim('[')
				if out.Month == nil {
					if !in.IsDelim(']') {
						out.Month = make([]LoginCount, 0, 1)
					} else {
						out.Month = []LoginCount{}
					}
				} else {
					out.Month = (out.Month)[:0]
				}
				for !in.IsDelim(']') {
					var v42 LoginCount
					(v42).UnmarshalEasyJSON(in)
					out.Month = append(out.Month, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine15(out *jwriter.Writer, in LoginPopularity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Day\":"
		out.RawString(prefix[1:])
		if in.Day == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Day {
				if v43 > 0 {
					out.RawByte(',')
				}
				(v44).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Week\":"
		out.RawString(prefix)
		if in.Week == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Week {
				if v45 > 0 {
					out.RawByte(',')
				}
				(v46).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Month\":"
		out.RawString(prefix)
		if in.Month == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Month {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginPopularity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginPopularity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginPopularity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginPopularity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine15(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine16(in *jlexer.Lexer, out *LoginCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		case "Count":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine16(out *jwriter.Writer, in LoginCount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.SID != "" {
		const prefix string = ",\"SID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SID))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine16(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine17(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UnprivilegedCollection":
			out.UnprivilegedCollection = bool(in.Bool())
		case "Machine":
			(out.Machine).UnmarshalEasyJSON(in)
		case "Network":
			(out.Network).UnmarshalEasyJSON(in)
		case "Availability":
			(out.Availability).UnmarshalEasyJSON(in)
		case "LoginPopularity":
			(out.LoginPopularity).UnmarshalEasyJSON(in)
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make(Users, 0, 0)
					} else {
						out.Users = Users{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v49 User
					(v49).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make(Groups, 0, 0)
					} else {
						out.Groups = Groups{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v50 Group
					(v50).UnmarshalEasyJSON(in)
					out.Groups = append(out.Groups, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Shares":
			if in.IsNull() {
				in.Skip()
				out.Shares = nil
			} else {
				in.Delim('[')
				if out.Shares == nil {
					if !in.IsDelim(']') {
						out.Shares = make(Shares, 0, 0)
					} else {
						out.Shares = Shares{}
					}
				} else {
					out.Shares = (out.Shares)[:0]
				}
				for !in.IsDelim(']') {
					var v51 Share
					(v51).UnmarshalEasyJSON(in)
					out.Shares = append(out.Shares, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Services":
			if in.IsNull() {
				in.Skip()
				out.Services = nil
			} else {
				in.Delim('[')
				if out.Services == nil {
					if !in.IsDelim(']') {
						out.Services = make(Services, 0, 0)
					} else {
						out.Services = Services{}
					}
				} else {
					out.Services = (out.Services)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Service
					(v52).UnmarshalEasyJSON(in)
					out.Services = append(out.Services, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Software":
			if in.IsNull() {
				in.Skip()
				out.Software = nil
			} else {
				in.Delim('[')
				if out.Software == nil {
					if !in.IsDelim(']') {
						out.Software = make([]Software, 0, 0)
					} else {
						out.Software = []Software{}
					}
				} else {
					out.Software = (out.Software)[:0]
				}
				for !in.IsDelim(']') {
					var v53 Software
					(v53).UnmarshalEasyJSON(in)
					out.Software = append(out.Software, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]RegisteredTask, 0, 0)
					} else {
						out.Tasks = []RegisteredTask{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v54 RegisteredTask
					(v54).UnmarshalEasyJSON(in)
					out.Tasks = append(out.Tasks, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Privileges":
			if in.IsNull() {
				in.Skip()
				out.Privileges = nil
			} else {
				in.Delim('[')
				if out.Privileges == nil {
					if !in.IsDelim(']') {
						out.Privileges = make(Privileges, 0, 1)
					} else {
						out.Privileges = Privileges{}
					}
				} else {
					out.Privileges = (out.Privileges)[:0]
				}
				for !in.IsDelim(']') {
					var v55 Privilege
					(v55).UnmarshalEasyJSON(in)
					out.Privileges = append(out.Privileges, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Collector":
			out.Collector = string(in.String())
		case "Version":
			out.Version = string(in.String())
		case "Commit":
			out.Commit = string(in.String())
		case "Collected":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Collected).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine17(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UnprivilegedCollection {
		const prefix string = ",\"UnprivilegedCollection\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.UnprivilegedCollection))
	}
	if true {
		const prefix string = ",\"Machine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Machine).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Network).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Availability).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"LoginPopularity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.LoginPopularity).MarshalEasyJSON(out)
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"Users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Users {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"Groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.Groups {
				if v58 > 0 {
					out.RawByte(',')
				}
				(v59).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Shares) != 0 {
		const prefix string = ",\"Shares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.Shares {
				if v60 > 0 {
					out.RawByte(',')
				}
				(v61).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Services) != 0 {
		const prefix string = ",\"Services\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Services {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Software) != 0 {
		const prefix string = ",\"Software\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v64, v65 := range in.Software {
				if v64 > 0 {
					out.RawByte(',')
				}
				(v65).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tasks) != 0 {
		const prefix string = ",\"Tasks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v66, v67 := range in.Tasks {
				if v66 > 0 {
					out.RawByte(',')
				}
				(v67).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Privileges) != 0 {
		const prefix string = ",\"Privileges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Privileges {
				if v68 > 0 {
					out.RawByte(',')
				}
				(v69).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Collector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Collector))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"Commit\":"
		out.RawString(prefix)
		out.String(string(in.Commit))
	}
	{
		const prefix string = ",\"Collected\":"
		out.RawString(prefix)
		out.Raw((in.Collected).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine17(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine18(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		case "Comment":
			out.Comment = string(in.String())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]Member, 0, 2)
					} else {
						out.Members = []Member{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v70 Member
					(v70).UnmarshalEasyJSON(in)
					out.Members = append(out.Members, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine18(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.SID != "" {
		const prefix string = ",\"SID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SID))
	}
	if in.Comment != "" {
		const prefix string = ",\"Comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Comment))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"Members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.Members {
				if v71 > 0 {
					out.RawByte(',')
				}
				(v72).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine18(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine19(in *jlexer.Lexer, out *Availability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Day":
			out.Day = uint64(in.Uint64())
		case "Week":
			out.Week = uint64(in.Uint64())
		case "Month":
			out.Month = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine19(out *jwriter.Writer, in Availability) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Day != 0 {
		const prefix string = ",\"Day\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Day))
	}
	if in.Week != 0 {
		const prefix string = ",\"Week\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Week))
	}
	if in.Month != 0 {
		const prefix string = ",\"Month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Month))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Availability) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Availability) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Availability) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Availability) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesIntegrationsLocalmachine19(l, v)
}
