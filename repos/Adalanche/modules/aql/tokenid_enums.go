// Code generated by "enumer -type=TokenID -output tokenid_enums.go"; DO NOT EDIT.

package aql

import (
	"fmt"
	"strings"
)

const _TokenIDName = "InvalidIntegerFloatUnquotedLDAPStringQuotedStringIdentifierHashIdentifierAtIdentifierCommentStarSlashExclamationDotDotdotCommaColonEqualsTildeLessThanLessThanEqualsGreaterThanGreaterThanEqualsAndOrXorNotBinaryAndBinaryOrBinaryNotLParanRParanLBracketRBracketLBraceRBraceEdgeAnyDirectionEdgeInEdgeOutIsMatchWhereSkipLimitOrderByDescUnionTrueFalseLiteralKeywordWhitespace"

var _TokenIDIndex = [...]uint16{0, 7, 14, 19, 37, 49, 59, 73, 85, 92, 96, 101, 112, 115, 121, 126, 131, 137, 142, 150, 164, 175, 192, 195, 197, 200, 203, 212, 220, 229, 235, 241, 249, 257, 263, 269, 285, 291, 298, 300, 305, 310, 314, 319, 326, 330, 335, 339, 344, 351, 358, 368}

const _TokenIDLowerName = "invalidintegerfloatunquotedldapstringquotedstringidentifierhashidentifieratidentifiercommentstarslashexclamationdotdotdotcommacolonequalstildelessthanlessthanequalsgreaterthangreaterthanequalsandorxornotbinaryandbinaryorbinarynotlparanrparanlbracketrbracketlbracerbraceedgeanydirectionedgeinedgeoutismatchwhereskiplimitorderbydescuniontruefalseliteralkeywordwhitespace"

func (i TokenID) String() string {
	if i < 0 || i >= TokenID(len(_TokenIDIndex)-1) {
		return fmt.Sprintf("TokenID(%d)", i)
	}
	return _TokenIDName[_TokenIDIndex[i]:_TokenIDIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TokenIDNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Integer-(1)]
	_ = x[Float-(2)]
	_ = x[UnquotedLDAPString-(3)]
	_ = x[QuotedString-(4)]
	_ = x[Identifier-(5)]
	_ = x[HashIdentifier-(6)]
	_ = x[AtIdentifier-(7)]
	_ = x[Comment-(8)]
	_ = x[Star-(9)]
	_ = x[Slash-(10)]
	_ = x[Exclamation-(11)]
	_ = x[Dot-(12)]
	_ = x[Dotdot-(13)]
	_ = x[Comma-(14)]
	_ = x[Colon-(15)]
	_ = x[Equals-(16)]
	_ = x[Tilde-(17)]
	_ = x[LessThan-(18)]
	_ = x[LessThanEquals-(19)]
	_ = x[GreaterThan-(20)]
	_ = x[GreaterThanEquals-(21)]
	_ = x[And-(22)]
	_ = x[Or-(23)]
	_ = x[Xor-(24)]
	_ = x[Not-(25)]
	_ = x[BinaryAnd-(26)]
	_ = x[BinaryOr-(27)]
	_ = x[BinaryNot-(28)]
	_ = x[LParan-(29)]
	_ = x[RParan-(30)]
	_ = x[LBracket-(31)]
	_ = x[RBracket-(32)]
	_ = x[LBrace-(33)]
	_ = x[RBrace-(34)]
	_ = x[EdgeAnyDirection-(35)]
	_ = x[EdgeIn-(36)]
	_ = x[EdgeOut-(37)]
	_ = x[Is-(38)]
	_ = x[Match-(39)]
	_ = x[Where-(40)]
	_ = x[Skip-(41)]
	_ = x[Limit-(42)]
	_ = x[OrderBy-(43)]
	_ = x[Desc-(44)]
	_ = x[Union-(45)]
	_ = x[True-(46)]
	_ = x[False-(47)]
	_ = x[Literal-(48)]
	_ = x[Keyword-(49)]
	_ = x[Whitespace-(50)]
}

var _TokenIDValues = []TokenID{Invalid, Integer, Float, UnquotedLDAPString, QuotedString, Identifier, HashIdentifier, AtIdentifier, Comment, Star, Slash, Exclamation, Dot, Dotdot, Comma, Colon, Equals, Tilde, LessThan, LessThanEquals, GreaterThan, GreaterThanEquals, And, Or, Xor, Not, BinaryAnd, BinaryOr, BinaryNot, LParan, RParan, LBracket, RBracket, LBrace, RBrace, EdgeAnyDirection, EdgeIn, EdgeOut, Is, Match, Where, Skip, Limit, OrderBy, Desc, Union, True, False, Literal, Keyword, Whitespace}

var _TokenIDNameToValueMap = map[string]TokenID{
	_TokenIDName[0:7]:          Invalid,
	_TokenIDLowerName[0:7]:     Invalid,
	_TokenIDName[7:14]:         Integer,
	_TokenIDLowerName[7:14]:    Integer,
	_TokenIDName[14:19]:        Float,
	_TokenIDLowerName[14:19]:   Float,
	_TokenIDName[19:37]:        UnquotedLDAPString,
	_TokenIDLowerName[19:37]:   UnquotedLDAPString,
	_TokenIDName[37:49]:        QuotedString,
	_TokenIDLowerName[37:49]:   QuotedString,
	_TokenIDName[49:59]:        Identifier,
	_TokenIDLowerName[49:59]:   Identifier,
	_TokenIDName[59:73]:        HashIdentifier,
	_TokenIDLowerName[59:73]:   HashIdentifier,
	_TokenIDName[73:85]:        AtIdentifier,
	_TokenIDLowerName[73:85]:   AtIdentifier,
	_TokenIDName[85:92]:        Comment,
	_TokenIDLowerName[85:92]:   Comment,
	_TokenIDName[92:96]:        Star,
	_TokenIDLowerName[92:96]:   Star,
	_TokenIDName[96:101]:       Slash,
	_TokenIDLowerName[96:101]:  Slash,
	_TokenIDName[101:112]:      Exclamation,
	_TokenIDLowerName[101:112]: Exclamation,
	_TokenIDName[112:115]:      Dot,
	_TokenIDLowerName[112:115]: Dot,
	_TokenIDName[115:121]:      Dotdot,
	_TokenIDLowerName[115:121]: Dotdot,
	_TokenIDName[121:126]:      Comma,
	_TokenIDLowerName[121:126]: Comma,
	_TokenIDName[126:131]:      Colon,
	_TokenIDLowerName[126:131]: Colon,
	_TokenIDName[131:137]:      Equals,
	_TokenIDLowerName[131:137]: Equals,
	_TokenIDName[137:142]:      Tilde,
	_TokenIDLowerName[137:142]: Tilde,
	_TokenIDName[142:150]:      LessThan,
	_TokenIDLowerName[142:150]: LessThan,
	_TokenIDName[150:164]:      LessThanEquals,
	_TokenIDLowerName[150:164]: LessThanEquals,
	_TokenIDName[164:175]:      GreaterThan,
	_TokenIDLowerName[164:175]: GreaterThan,
	_TokenIDName[175:192]:      GreaterThanEquals,
	_TokenIDLowerName[175:192]: GreaterThanEquals,
	_TokenIDName[192:195]:      And,
	_TokenIDLowerName[192:195]: And,
	_TokenIDName[195:197]:      Or,
	_TokenIDLowerName[195:197]: Or,
	_TokenIDName[197:200]:      Xor,
	_TokenIDLowerName[197:200]: Xor,
	_TokenIDName[200:203]:      Not,
	_TokenIDLowerName[200:203]: Not,
	_TokenIDName[203:212]:      BinaryAnd,
	_TokenIDLowerName[203:212]: BinaryAnd,
	_TokenIDName[212:220]:      BinaryOr,
	_TokenIDLowerName[212:220]: BinaryOr,
	_TokenIDName[220:229]:      BinaryNot,
	_TokenIDLowerName[220:229]: BinaryNot,
	_TokenIDName[229:235]:      LParan,
	_TokenIDLowerName[229:235]: LParan,
	_TokenIDName[235:241]:      RParan,
	_TokenIDLowerName[235:241]: RParan,
	_TokenIDName[241:249]:      LBracket,
	_TokenIDLowerName[241:249]: LBracket,
	_TokenIDName[249:257]:      RBracket,
	_TokenIDLowerName[249:257]: RBracket,
	_TokenIDName[257:263]:      LBrace,
	_TokenIDLowerName[257:263]: LBrace,
	_TokenIDName[263:269]:      RBrace,
	_TokenIDLowerName[263:269]: RBrace,
	_TokenIDName[269:285]:      EdgeAnyDirection,
	_TokenIDLowerName[269:285]: EdgeAnyDirection,
	_TokenIDName[285:291]:      EdgeIn,
	_TokenIDLowerName[285:291]: EdgeIn,
	_TokenIDName[291:298]:      EdgeOut,
	_TokenIDLowerName[291:298]: EdgeOut,
	_TokenIDName[298:300]:      Is,
	_TokenIDLowerName[298:300]: Is,
	_TokenIDName[300:305]:      Match,
	_TokenIDLowerName[300:305]: Match,
	_TokenIDName[305:310]:      Where,
	_TokenIDLowerName[305:310]: Where,
	_TokenIDName[310:314]:      Skip,
	_TokenIDLowerName[310:314]: Skip,
	_TokenIDName[314:319]:      Limit,
	_TokenIDLowerName[314:319]: Limit,
	_TokenIDName[319:326]:      OrderBy,
	_TokenIDLowerName[319:326]: OrderBy,
	_TokenIDName[326:330]:      Desc,
	_TokenIDLowerName[326:330]: Desc,
	_TokenIDName[330:335]:      Union,
	_TokenIDLowerName[330:335]: Union,
	_TokenIDName[335:339]:      True,
	_TokenIDLowerName[335:339]: True,
	_TokenIDName[339:344]:      False,
	_TokenIDLowerName[339:344]: False,
	_TokenIDName[344:351]:      Literal,
	_TokenIDLowerName[344:351]: Literal,
	_TokenIDName[351:358]:      Keyword,
	_TokenIDLowerName[351:358]: Keyword,
	_TokenIDName[358:368]:      Whitespace,
	_TokenIDLowerName[358:368]: Whitespace,
}

var _TokenIDNames = []string{
	_TokenIDName[0:7],
	_TokenIDName[7:14],
	_TokenIDName[14:19],
	_TokenIDName[19:37],
	_TokenIDName[37:49],
	_TokenIDName[49:59],
	_TokenIDName[59:73],
	_TokenIDName[73:85],
	_TokenIDName[85:92],
	_TokenIDName[92:96],
	_TokenIDName[96:101],
	_TokenIDName[101:112],
	_TokenIDName[112:115],
	_TokenIDName[115:121],
	_TokenIDName[121:126],
	_TokenIDName[126:131],
	_TokenIDName[131:137],
	_TokenIDName[137:142],
	_TokenIDName[142:150],
	_TokenIDName[150:164],
	_TokenIDName[164:175],
	_TokenIDName[175:192],
	_TokenIDName[192:195],
	_TokenIDName[195:197],
	_TokenIDName[197:200],
	_TokenIDName[200:203],
	_TokenIDName[203:212],
	_TokenIDName[212:220],
	_TokenIDName[220:229],
	_TokenIDName[229:235],
	_TokenIDName[235:241],
	_TokenIDName[241:249],
	_TokenIDName[249:257],
	_TokenIDName[257:263],
	_TokenIDName[263:269],
	_TokenIDName[269:285],
	_TokenIDName[285:291],
	_TokenIDName[291:298],
	_TokenIDName[298:300],
	_TokenIDName[300:305],
	_TokenIDName[305:310],
	_TokenIDName[310:314],
	_TokenIDName[314:319],
	_TokenIDName[319:326],
	_TokenIDName[326:330],
	_TokenIDName[330:335],
	_TokenIDName[335:339],
	_TokenIDName[339:344],
	_TokenIDName[344:351],
	_TokenIDName[351:358],
	_TokenIDName[358:368],
}

// TokenIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenIDString(s string) (TokenID, error) {
	if val, ok := _TokenIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TokenIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenID values", s)
}

// TokenIDValues returns all values of the enum
func TokenIDValues() []TokenID {
	return _TokenIDValues
}

// TokenIDStrings returns a slice of all String values of the enum
func TokenIDStrings() []string {
	strs := make([]string, len(_TokenIDNames))
	copy(strs, _TokenIDNames)
	return strs
}

// IsATokenID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenID) IsATokenID() bool {
	for _, v := range _TokenIDValues {
		if i == v {
			return true
		}
	}
	return false
}
